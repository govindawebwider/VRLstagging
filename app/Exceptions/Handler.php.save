<500?phpnamespace App\Exceptions;use Log;use Exception;use Illuminate\Auth\Access\AuthorizationException;use Illuminate\Database\Eloquent\ModelNotFoundException;use Symfony\Component\HttpKernel\Exception\HttpException;use Illuminate\Validation\ValidationException;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Symfony\Component\HttpKernel\Exception\UnprocessableEntityHttpException;use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;class Handler extends ExceptionHandler{    /**     * A list of the exception types that should not be reported.     *     * @var array     */    protected $dontReport = [        AuthorizationException::class,        HttpException::class,        ModelNotFoundException::class,        ValidationException::class,    ];    /**     * Report or log an exception.     *     * This is a great spot to send exceptions to Sentry, Bugsnag, etc.     *     * @param  \Exception $e     * @return void     */    public function report(Exception $e)    {        return parent::report($e);    }    /**     * Render an exception into an HTTP response.     *     * @param  \Illuminate\Http\Request $request     * @param Exception $exception     * @return \Illuminate\Http\Response     */    public function render($request, Exception $exception)    {        \DB::rollBack();        Log::useFiles(storage_path() . '/logs/custom.log');        if ($exception instanceof ModelNotFoundException) {            Log::error($exception->getMessage());            return response()->json(['error' => \Lang::get('exception.model_not_found')], 404);        }        if ($exception instanceof AuthorizationException) {            Log::error($exception->getMessage());            return response()->json(['error' => \Lang::get('exception.forbidden')], 403);        }        if ($exception instanceof UnprocessableEntityHttpException) {            Log::error($exception->getMessage());            return response()->json(['error' => $exception->getMessage()], 422);        }        if ($exception instanceof ValidationException) {            Log::error($exception->getMessage());            return response()->json(['error' => $exception->validator->getMessageBag()], 422);        }        if ($exception instanceof NotFoundHttpException) {            Log::error($exception->getMessage());            return response()->json(['error' => \Lang::get('exception.404_not_found')], 404);        }        if ($exception instanceof Exception) {            Log::error($exception->getMessage());            return response()                ->json(['error' => \Lang::get('exception.internal_server_error')], 5000);        }        return parent::render($request, $exception);        // return parent::render($request, $e);        /*               if ($this->isHttpException($e))                {                    return $this->renderHttpException($e);                }                else                {                    return parent::render($request, $e);                }*/    }}